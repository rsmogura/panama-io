// Generated by jextract

package eu.smogura.panama.io.posix.internal;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class posix_io_lnx_h  {

    static final LibraryLookup[] LIBRARIES = RuntimeHelper.libraries(new String[] {
    });

    /* package-private */ posix_io_lnx_h() {}
    public static int SOCK_STREAM() {
        return (int)1L;
    }
    public static MethodHandle socket$MH() {
        return RuntimeHelper.requireNonNull(constants$0.socket$MH,"socket");
    }
    public static int socket ( int __domain,  int __type,  int __protocol) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.socket$MH, "socket");
        try {
            return (int)mh$.invokeExact(__domain, __type, __protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle connect$MH() {
        return RuntimeHelper.requireNonNull(constants$0.connect$MH,"connect");
    }
    public static int connect ( int __fd,  Addressable __addr,  int __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.connect$MH, "connect");
        try {
            return (int)mh$.invokeExact(__fd, __addr.address(), __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle close$MH() {
        return RuntimeHelper.requireNonNull(constants$0.close$MH,"close");
    }
    public static int close ( int __fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.close$MH, "close");
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle read$MH() {
        return RuntimeHelper.requireNonNull(constants$0.read$MH,"read");
    }
    public static long read ( int __fd,  Addressable __buf,  long __nbytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.read$MH, "read");
        try {
            return (long)mh$.invokeExact(__fd, __buf.address(), __nbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle write$MH() {
        return RuntimeHelper.requireNonNull(constants$0.write$MH,"write");
    }
    public static long write ( int __fd,  Addressable __buf,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.write$MH, "write");
        try {
            return (long)mh$.invokeExact(__fd, __buf.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open$MH() {
        return RuntimeHelper.requireNonNull(constants$0.open$MH,"open");
    }
    public static int open ( Addressable __file,  int __oflag, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.open$MH, "open");
        try {
            return (int)mh$.invokeExact(__file.address(), __oflag, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int AF_INET() {
        return (int)2L;
    }
    public static int AF_INET6() {
        return (int)10L;
    }
}


